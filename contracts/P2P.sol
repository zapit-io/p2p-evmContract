/**
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.18;

import "hardhat/console.sol";

abstract contract Token {
    function transfer(
        address _to,
        uint _value
    ) public virtual returns (bool success);

    function transferFrom(
        address _from,
        address _to,
        uint _value
    ) public virtual returns (bool success);

    function virtualapprove(
        address _spender,
        uint _value
    ) public virtual returns (bool success);

    function approve(
        address spender,
        uint256 value
    ) public virtual returns (bool);
}

/// @title Zapit P2P Escrows
/// @author Zapit
contract ZapitP2PEscrow {
    /***********************
    +   Global settings   +
    ***********************/

    // Address of the arbitrator
    address public arbitrator;
    // Address of the owner (who can withdraw collected fees)
    address public owner;

    uint8 public fees; // fees for zapit

    uint32 public requestCancellationMinimumTime;

    // Cumulative balance of collected fees
    uint256 public feesAvailableForWithdraw;

    /***********************
    +  Instruction types  +
    ***********************/

    // Called when the buyer marks payment as sent. Locks funds in escrow
    uint8 constant INSTRUCTION_SELLER_CANNOT_CANCEL = 0x01;
    // Buyer cancelling
    uint8 constant INSTRUCTION_BUYER_CANCEL = 0x02;
    // Seller cancelling
    uint8 constant INSTRUCTION_SELLER_CANCEL = 0x03;
    // Seller requesting to cancel. Begins a window for buyer to object
    uint8 constant INSTRUCTION_SELLER_REQUEST_CANCEL = 0x04;
    // Seller releasing funds to the buyer
    uint8 constant INSTRUCTION_RELEASE = 0x05;
    // Either party permitting the arbitrator to resolve a dispute
    uint8 constant INSTRUCTION_RESOLVE = 0x06;

    // Message to be signed by either of the parties for resolving a dispute
    bytes8 constant MESSAGE_DISPUTE = "ABCD";

    /***********************
    +       Events        +
    ***********************/

    event Created(bytes32 indexed _tradeHash);
    event SellerCancelDisabled(bytes32 indexed _tradeHash);
    event SellerRequestedCancel(bytes32 indexed _tradeHash);
    event CancelledBySeller(bytes32 indexed _tradeHash);
    event CancelledByBuyer(bytes32 indexed _tradeHash);
    event Released(bytes32 indexed _tradeHash);
    event DisputeResolved(bytes32 indexed _tradeHash);

    struct Escrow {
        // So we know the escrow exists
        bool exists;
        // This is the timestamp in whic hthe seller can cancel the escrow after.
        // It has two special values:
        // 0 : Permanently locked by the buyer (i.e. marked as paid; the seller can never cancel)
        // 1 : The seller can only request to cancel, which will change this value to a timestamp.
        //     This option is avaialble for complex trade terms such as cash-in-person where a
        //     payment window is inappropriate
        uint32 sellerCanCancelAfter;
        // Cumulative cost of gas incurred by the relayer. This amount will be refunded to the owner
        // in the way of fees once the escrow has completed
        uint128 totalGasFeesSpentByRelayer;
        // address of the buyer
        address payable _buyer;
        // address of the seller
        address payable _seller;
        // value of the escrow
        uint256 _value;
    }

    // Mapping of active trades. The key here is a hash of the trade proprties
    mapping(bytes32 => Escrow) public escrows;

    modifier onlyOwner() {
        require(msg.sender == owner, "Must be owner");
        _;
    }

    modifier matchInstruction(
        uint8 _instructionByte,
        uint8 _expectedInstruction
    ) {
        require(
            _instructionByte == _expectedInstruction,
            "Instruction byte doesn't match with the operation!"
        );
        _;
    }

    modifier onlyArbitrator() {
        require(msg.sender == arbitrator, "Must be arbitrator");
        _;
    }

    /// @notice Initialize the contract.
    constructor(uint8 _fees) {
        owner = msg.sender;
        arbitrator = msg.sender;
        fees = _fees; // stored in terms of basis-points
        requestCancellationMinimumTime = 0 seconds;
    }

    /// @notice Create and fund a new escrow.
    /// @param _tradeID The unique ID of the trade, generated by localethereum.com
    /// @param _seller The selling party
    /// @param _buyer The buying party
    /// @param _value The amount of the escrow, exclusive of the fee
    /// @param _paymentWindowInSeconds The time in seconds from escrow creation that the seller can cancel after
    function createEscrow(
        bytes32 _tradeID,
        address _seller,
        address _buyer,
        uint256 _value,
        uint32 _paymentWindowInSeconds
    ) external payable {
        // The trade hash is created by tightly-concatenating and hashing properties of the trade.
        // This hash becomes the identifier of the escrow, and hence all these variables must be
        // supplied on future contract calls

        // Require that trade does not already exist
        require(!escrows[_tradeID].exists, "Trade already exists");

        // Check transaction value against passed _value and make sure is not 0
        require(msg.value == _value && msg.value > 0, "Incorrect ETH sent");

        uint32 _sellerCanCancelAfter = _paymentWindowInSeconds == 0
            ? 1
            : uint32(block.timestamp) + _paymentWindowInSeconds;

        // Add the escrow to the public mapping
        escrows[_tradeID] = Escrow(
            true,
            _sellerCanCancelAfter,
            0,
            payable(_buyer),
            payable(_seller),
            _value
        );
        emit Created(_tradeID);
    }

    /// @notice Called by the arbitrator to resolve a dispute. Requires a signature from either party.
    /// @param _tradeID Escrow "tradeID" parameter
    /// @param _sig Signature from either party
    /// @param _buyerPercent What % should be distributed to the buyer (this is usually 0 or 100)
    function resolveDispute(
        bytes32 _tradeID,
        bytes memory _sig,
        uint8 _buyerPercent
    ) external onlyArbitrator {
        bytes32 messageHash = keccak256(abi.encodePacked(MESSAGE_DISPUTE));

        messageHash = prefixed(messageHash);
        address _signature = recoverSigner(messageHash, _sig);

        Escrow storage _escrow = escrows[_tradeID];

        console.log("Address", _signature);
        console.log("Escrow-seller", _escrow._seller);

        require(_escrow.exists, "Escrow does not exist");

        require(
            _signature == _escrow._buyer || _signature == _escrow._seller,
            "Must be buyer or seller"
        );

        require(_buyerPercent <= 100, "_buyerPercent must be 100 or lower");

        uint256 _totalFees = (_escrow._value * fees) / 10000;

        feesAvailableForWithdraw += _totalFees;

        delete escrows[_tradeID];
        emit DisputeResolved(_tradeID);
        if (_buyerPercent == 100)
            payable(_escrow._buyer).transfer(
                ((_escrow._value - _totalFees) * _buyerPercent) / 100
            );
        if (_buyerPercent == 0)
            payable(_escrow._seller).transfer(
                ((_escrow._value - _totalFees) * (100 - _buyerPercent)) / 100
            );
    }

    /// @notice Disable the seller from cancelling (i.e. "mark as paid"). Direct call option.
    /// @param _tradeID Escrow "tradeID" parameter
    /// @return bool
    function disableSellerCancel(bytes32 _tradeID) external returns (bool) {
        return doDisableSellerCancel(_tradeID);
    }

    /// @notice Cancel the escrow as a seller. Direct call option.
    /// @param _tradeID Escrow "tradeID" parameter
    /// @return bool
    function sellerCancel(bytes32 _tradeID) external returns (bool) {
        return doSellerCancel(_tradeID);
    }

    /// @notice Request to cancel as a seller. Direct call option.
    /// @param _tradeID Escrow "tradeID" parameter
    /// @return bool
    function sellerRequestCancel(bytes32 _tradeID) external returns (bool) {
        return doSellerRequestCancel(_tradeID);
    }

    /// @notice Withdraw fees collected by the contract. Only the owner can call this.
    /// @param _to Address to withdraw fees in to
    /// @param _amount Amount to withdraw
    function withdrawFees(
        address payable _to,
        uint256 _amount
    ) external onlyOwner {
        // This check also prevents underflow
        require(
            _amount <= feesAvailableForWithdraw,
            "Amount is higher than amount available"
        );
        feesAvailableForWithdraw -= _amount;
        payable(_to).transfer(_amount);
    }

    /// @notice Set the arbitrator to a new address. Only the owner can call this.
    /// @param _newArbitrator Address of the replacement arbitrator
    function setArbitrator(address _newArbitrator) external onlyOwner {
        arbitrator = _newArbitrator;
    }

    /// @notice Change the owner to a new address. Only the owner can call this.
    /// @param _newOwner Address of the replacement owner
    function setOwner(address _newOwner) external onlyOwner {
        owner = _newOwner;
    }

    /// @notice Change the requestCancellationMinimumTime. Only the owner can call this.
    /// @param _newRequestCancellationMinimumTime Replacement
    function setRequestCancellationMinimumTime(
        uint32 _newRequestCancellationMinimumTime
    ) external onlyOwner {
        requestCancellationMinimumTime = _newRequestCancellationMinimumTime;
    }

    /// @notice Send ERC20 tokens away. This function allows the owner to withdraw stuck ERC20 tokens.
    /// @param _tokenContract Token contract
    /// @param _transferTo Recipient
    /// @param _value Value
    function transferToken(
        Token _tokenContract,
        address _transferTo,
        uint256 _value
    ) external onlyOwner {
        _tokenContract.transfer(_transferTo, _value);
    }

    /// @notice Send ERC20 tokens away. This function allows the owner to withdraw stuck ERC20 tokens.
    /// @param _tokenContract Token contract
    /// @param _transferTo Recipient
    /// @param _transferFrom Sender
    /// @param _value Value
    function transferTokenFrom(
        Token _tokenContract,
        address _transferTo,
        address _transferFrom,
        uint256 _value
    ) external onlyOwner {
        _tokenContract.transferFrom(_transferTo, _transferFrom, _value);
    }

    /// @notice Send ERC20 tokens away. This function allows the owner to withdraw stuck ERC20 tokens.
    /// @param _tokenContract Token contract
    /// @param _spender Spender address
    /// @param _value Value
    function approveToken(
        Token _tokenContract,
        address _spender,
        uint256 _value
    ) external onlyOwner {
        _tokenContract.approve(_spender, _value);
    }

    ///@notice Called buy the buyer to disable seller cancellation option once tha payment has been done
    ///@param _tradeID Escrow "tradeID" parameter
    ///@param _instructionByte Instruction byte
    ///@return bool

    function sellerCannotCancel(
        bytes32 _tradeID,
        uint8 _instructionByte
    )
        external
        matchInstruction(_instructionByte, INSTRUCTION_SELLER_CANNOT_CANCEL)
        returns (bool)
    {
        return doDisableSellerCancel(_tradeID);
    }

    ///@notice Called buy the buyer to cancel the escrow and returning the funds to the seller
    ///@param _tradeID Escrow "tradeID" parameter
    ///@param _instructionByte Instruction byte
    ///@return bool

    function buyerCancel(
        bytes32 _tradeID,
        uint8 _instructionByte
    )
        external
        matchInstruction(_instructionByte, INSTRUCTION_BUYER_CANCEL)
        returns (bool)
    {
        return doBuyerCancel(_tradeID);
    }

    ///@notice Called buy the seller to release the escrow
    ///@param _tradeID Escrow "tradeID" parameter
    ///@param _instructionByte Instruction byte
    ///@return bool

    function releaseEscrow(
        bytes32 _tradeID,
        uint8 _instructionByte
    )
        external
        matchInstruction(_instructionByte, INSTRUCTION_RELEASE)
        returns (bool)
    {
        return doRelease(_tradeID);
    }

    ///@notice Called buy the seller to cancel the escrow
    ///@param _tradeID Escrow "tradeID" parameter
    ///@param _instructionByte Instruction byte
    ///@return bool

    function sellerCancelation(
        bytes32 _tradeID,
        uint8 _instructionByte
    )
        external
        matchInstruction(_instructionByte, INSTRUCTION_SELLER_CANCEL)
        returns (bool)
    {
        return doSellerCancel(_tradeID);
    }

    ///@notice Called buy the seller to request for cancelling an escrow
    ///@param _tradeID Escrow "tradeID" parameter
    ///@param _instructionByte Instruction byte
    ///@return bool
    function sellerRequestCancel(
        bytes32 _tradeID,
        uint8 _instructionByte
    )
        external
        matchInstruction(_instructionByte, INSTRUCTION_SELLER_REQUEST_CANCEL)
        returns (bool)
    {
        return doSellerRequestCancel(_tradeID);
    }

    /// @notice Transfer the value of an escrow, minus the fees
    /// @param _to Recipient address
    /// @param _value Value of the transfer

    function transferMinusFees(
        address payable _to,
        uint256 _value,
        uint32 _fee
    ) private {
        uint256 _totalFees = (_fee / 10000) * _value;
        if (_value - _totalFees > _value) return;
        // Add fees to the pot for zapit to withdraw (now it's 0)
        feesAvailableForWithdraw += _totalFees;
        payable(_to).transfer(_value);
    }

    /// @notice Release escrow to the buyer. This completes it and removes it from the mapping.
    /// @param _tradeID Escrow "tradeID" parameter
    /// @return bool
    function doRelease(bytes32 _tradeID) private returns (bool) {
        Escrow storage _escrow = escrows[_tradeID];
        if (!_escrow.exists) return false;

        delete escrows[_tradeID];

        emit Released(_tradeID);
        transferMinusFees(
            _escrow._buyer,
            _escrow._value,
            fees // fees to be paid to zapit
        );
        return true;
    }

    /// @notice Prevents the seller from cancelling an escrow. Used to "mark as paid" by the buyer.
    /// @param _tradeID Escrow "tradeID" parameter
    ///
    /// @return bool
    function doDisableSellerCancel(bytes32 _tradeID) private returns (bool) {
        Escrow storage _escrow = escrows[_tradeID];

        if (!_escrow.exists) return false;

        if (msg.sender != _escrow._buyer) return false;

        if (_escrow.sellerCanCancelAfter == 0) return false;

        _escrow.sellerCanCancelAfter = 0;

        emit SellerCancelDisabled(_tradeID);
        return true;
    }

    /// @notice Cancels the trade and returns the ETH to the seller. Can only be called the buyer.
    /// @param _tradeID Escrow "tradeID" parameter
    /// @return bool
    function doBuyerCancel(bytes32 _tradeID) private returns (bool) {
        Escrow storage _escrow = escrows[_tradeID];
        bytes32 _tradeHash;

        if (!_escrow.exists) return false;

        if (msg.sender != _escrow._buyer) return false;

        delete escrows[_tradeHash];

        emit CancelledByBuyer(_tradeID);
        transferMinusFees(_escrow._seller, _escrow._value, 0);
        return true;
    }

    /// @notice Returns the ETH in escrow to the seller. Called by the seller. Sometimes unavailable.
    /// @param _tradeID Escrow "tradeID" parameter
    /// @return bool
    function doSellerCancel(bytes32 _tradeID) private returns (bool) {
        Escrow storage _escrow = escrows[_tradeID];

        if (!_escrow.exists) revert("Escrow does not exist");

        if (msg.sender != _escrow._seller) {
            return false;
        }

        if (
            _escrow.sellerCanCancelAfter <= 1 ||
            _escrow.sellerCanCancelAfter > block.timestamp
        ) {
            return false;
        }
        if (_escrow.sellerCanCancelAfter + 12 hours > block.timestamp) {
            return false;
        }
        delete escrows[_tradeID];
        emit CancelledBySeller(_tradeID);
        transferMinusFees(_escrow._seller, _escrow._value, 0);
        return true;
    }

    /// @notice Request to cancel. Used if the buyer is unresponsive. Begins a countdown timer.
    /// @param _tradeID Escrow "tradeID" parameter
    /// @return bool
    function doSellerRequestCancel(bytes32 _tradeID) private returns (bool) {
        // Called on unlimited payment window trades where the buyer is not responding
        Escrow storage _escrow = escrows[_tradeID];
        if (!_escrow.exists) {
            return false;
        }

        if (msg.sender != _escrow._seller) return false;

        if (_escrow.sellerCanCancelAfter != 1) {
            return false;
        }
        escrows[_tradeID].sellerCanCancelAfter =
            uint32(block.timestamp) +
            requestCancellationMinimumTime;

        emit SellerRequestedCancel(_tradeID);

        return true;
    }

    /// @notice Returns an empty escrow struct and 0 _tradeHash if not found.
    /// @param _h Data to be hashed
    /// @param _v Signature "v" component
    /// @param _r Signature "r" component
    /// @param _s Signature "s" component
    /// @return address
    function recoverAddress(
        bytes32 _h,
        uint8 _v,
        bytes32 _r,
        bytes32 _s
    ) private pure returns (address) {
        bytes memory _prefix = "\x19Ethereum Signed Message:\n32";
        bytes32 _prefixedHash = keccak256(abi.encodePacked(_prefix, _h));
        return ecrecover(_prefixedHash, _v, _r, _s);
    }

    /// @notice Recover the address of the signer of a message.
    /// @param message Message that was signed
    /// @param signature Signature from either party
    /// @return address

    function recoverSigner(
        bytes32 message,
        bytes memory signature
    ) internal pure returns (address) {
        uint8 v;
        bytes32 r;
        bytes32 s;

        (v, r, s) = splitSignature(signature);

        return ecrecover(message, v, r, s);
    }

    // Builds a prefixed hash to mimic the behavior of eth_sign.
    function prefixed(bytes32 hash) internal pure returns (bytes32) {
        return
            keccak256(
                abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)
            );
    }

    function getMessageHash(bytes32 _tradeID) public pure returns (bytes32) {
        return keccak256(abi.encodePacked(_tradeID));
    }

    function splitSignature(
        bytes memory sig
    ) internal pure returns (uint8 v, bytes32 r, bytes32 s) {
        require(sig.length == 65);
        assembly {
            // first 32 bytes, after the length prefix
            r := mload(add(sig, 32))
            // second 32 bytes
            s := mload(add(sig, 64))
            // final byte (first byte of the next 32 bytes)
            v := byte(0, mload(add(sig, 96)))
        }
    }
}
