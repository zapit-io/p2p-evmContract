/**
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.18;

/// @title Zapit P2P Escrows
/// @author Zapit
contract ZapitP2PEscrow {
    /***********************
    +   Global settings   +
    ***********************/

    // Address of the arbitrator
    address public arbitrator;
    // Address of the owner (who can withdraw collected fees)
    address public owner;

    uint16 public fees; // fees for zapit

    // Cumulative balance of collected fees
    uint256 public feesAvailableForWithdraw;

    /***********************
    +  Instruction types  +
    ***********************/

    // Buyer cancelling
    uint8 constant INSTRUCTION_BUYER_CANCEL = 0x02;

    // custom order expiration option
    uint32 private ORDER_EXPIRATION = 4 hours;

    /***********************
    +       Events        +
    ***********************/

    event Created(bytes32 indexed _tradeHash);
    event CancelledByBuyer(bytes32 indexed _tradeHash);
    event Released(bytes32 indexed _tradeHash);
    event DisputeClaimed(bytes32 indexed _tradeHash);
    event TradeCompleted(bytes32 indexed _tradeHash);

    struct Escrow {
        // So we know the escrow exists
        bool exists;
        // This is the timestamp in whic the seller can cancel the escrow after.
        uint32 orderExpiration;
        // storing the timestamp when the escrow was created
        uint32 createdAt;
        // address of the buyer
        address payable _buyer;
        // address of the seller
        address payable _seller;
        // value of the escrow
        uint256 _value;
    }

    // Mapping of active trades. The key here is a hash of the trade proprties
    mapping(bytes32 => Escrow) public escrows;

    modifier onlyOwner() {
        require(msg.sender == owner, "Must be owner");
        _;
    }

    modifier matchInstruction(
        uint8 _instructionByte,
        uint8 _expectedInstruction
    ) {
        require(
            _instructionByte == _expectedInstruction,
            "Instruction byte doesn't match with the operation!"
        );
        _;
    }

    modifier onlyArbitrator() {
        require(msg.sender == arbitrator, "Must be arbitrator");
        _;
    }

    /// @notice Initialize the contract.
    constructor(uint16 _fees) {
        owner = msg.sender;
        arbitrator = msg.sender;
        require(_fees < 10000, "Fees must be less than 10000");
        fees = _fees; // stored in terms of basis-points
    }

    /// @notice Create and fund a new escrow.
    /// @param _tradeID The unique ID of the trade, generated by localethereum.com
    /// @param _seller The selling party
    /// @param _buyer The buying party
    /// @param _value The amount of the escrow, exclusive of the fee
    function createEscrow(
        bytes32 _tradeID,
        address _seller,
        address _buyer,
        uint256 _value
    ) external payable {
        // Require that trade does not already exist
        require(!escrows[_tradeID].exists, "Trade already exists");

        // Check transaction value against passed _value and make sure is not 0
        require(msg.value == _value && msg.value > 0, "Incorrect ETH sent");

        // Add the escrow to the public mapping
        escrows[_tradeID] = Escrow(
            true,
            ORDER_EXPIRATION,
            uint32(block.timestamp),
            payable(_buyer),
            payable(_seller),
            _value
        );
        emit Created(_tradeID);
    }

    /// @notice Getting a message-hash
    /// @param _message Message that was signed
    /// @param recipient Recipient address
    /// @return bytes32 Message hash
    function getMessageHash(
        bytes32 _message,
        address recipient
    ) public pure returns (bytes32) {
        return keccak256(abi.encodePacked(_message, recipient));
    }

    /// @notice Called by the favourable party for whom the order has been resolved by the arbitrator
    /// @param _tradeID Escrow "tradeID" parameter
    /// @param _sig Signature from either party
    function claimDisputedOrder(bytes32 _tradeID, bytes memory _sig) external {
        Escrow storage _escrow = escrows[_tradeID];
        require(_escrow.exists, "Escrow does not exist");

        // concat a message out of the tradeID and the msg.sender
        bytes32 messageHash = getMessageHash(_tradeID, msg.sender);
        bytes32 signedMessageHash = getEthSignedMessageHash(messageHash);
        address _signature = recoverSigner(signedMessageHash, _sig);

        require(
            _signature == arbitrator,
            "Signature must be from the arbitrator"
        );

        // tranfer the funds to the msg.sender
        transferMinusFees(payable(msg.sender), _escrow._value, fees);
        _escrow.exists = false;
        emit DisputeClaimed(_tradeID);
    }

    /// @notice Creating the signed message hash of a message-hash
    /// @param _messageHash Message hash
    function getEthSignedMessageHash(
        bytes32 _messageHash
    ) public pure returns (bytes32) {
        /*
        Signature is produced by signing a keccak256 hash with the following format:
        "\x19Ethereum Signed Message\n" + len(msg) + msg
        */
        return
            keccak256(
                abi.encodePacked(
                    "\x19Ethereum Signed Message:\n32",
                    _messageHash
                )
            );
    }

    /// @notice Called by the seller for completing the order
    /// @param _tradeID Escrow "tradeID" parameter
    /// @param _recipient Recipient address
    /// @param _sig Signature from either party
    function executeOrder(
        bytes32 _tradeID,
        address _recipient,
        bytes memory _sig
    ) external {
        Escrow storage _escrow = escrows[_tradeID];

        require(_escrow.exists, "Escrow does not exist");

        // concat a message out of the tradeID and the msg.sender
        bytes32 messageHash = getMessageHash(_tradeID, _recipient);
        bytes32 signedMessageHash = getEthSignedMessageHash(messageHash);
        address _address = recoverSigner(signedMessageHash, _sig);

        require(
            _address == _escrow._seller,
            "Signature must be from the seller"
        );

        // tranfer the funds to the msg.sender
        transferMinusFees(payable(_escrow._buyer), _escrow._value, fees);
        _escrow.exists = false;
        emit TradeCompleted(_tradeID);
    }

    /// @notice Withdraw fees collected by the contract. Only the owner can call this.
    /// @param _to Address to withdraw fees in to
    /// @param _amount Amount to withdraw
    function withdrawFees(
        address payable _to,
        uint256 _amount
    ) external onlyOwner {
        // This check also prevents underflow
        require(
            _amount <= feesAvailableForWithdraw,
            "Amount is higher than amount available"
        );
        feesAvailableForWithdraw -= _amount;
        payable(_to).transfer(_amount);
    }

    /// @notice Set the arbitrator to a new address. Only the owner can call this.
    /// @param _newArbitrator Address of the replacement arbitrator
    function setArbitrator(address _newArbitrator) external onlyOwner {
        arbitrator = _newArbitrator;
    }

    /// @notice Change the owner to a new address. Only the owner can call this.
    /// @param _newOwner Address of the replacement owner
    function setOwner(address _newOwner) external onlyOwner {
        owner = _newOwner;
    }

    ///@notice Called buy the buyer to cancel the escrow and returning the funds to the seller
    ///@param _tradeID Escrow "tradeID" parameter
    ///@param _instructionByte Instruction byte
    ///@return bool

    function buyerCancel(
        bytes32 _tradeID,
        uint8 _instructionByte
    )
        external
        matchInstruction(_instructionByte, INSTRUCTION_BUYER_CANCEL)
        returns (bool)
    {
        return doBuyerCancel(_tradeID);
    }

    /// @notice Transfer the value of an escrow, minus the fees
    /// @param _to Recipient address
    /// @param _value Value of the transfer

    function transferMinusFees(
        address payable _to,
        uint256 _value,
        uint256 _fee
    ) private {
        uint256 _totalFees = (_fee * _value) / 10000;
        feesAvailableForWithdraw += _totalFees;
        payable(_to).transfer(_value - _totalFees);
    }

    /// @notice Change the order expiration time
    /// @param _newExpiration New expiration time
    function changeOrderExpiration(uint32 _newExpiration) external onlyOwner {
        ORDER_EXPIRATION = _newExpiration;
    }

    /// @notice Cancels the trade and returns the ETH to the seller. Can only be called the buyer.
    /// @param _tradeID Escrow "tradeID" parameter
    /// @return bool
    function doBuyerCancel(bytes32 _tradeID) private returns (bool) {
        Escrow storage _escrow = escrows[_tradeID];

        require(_escrow.exists, "Escrow does not exist");
        require(msg.sender == _escrow._buyer, "Must be buyer");

        emit CancelledByBuyer(_tradeID);
        transferMinusFees(_escrow._seller, _escrow._value, fees);
        return true;
    }

    /// @notice Setting the fees of the contract
    /// @param _fees Fees in basis-points
    function setFees(uint8 _fees) public onlyOwner {
        require(_fees < 10000, "Fees must be less than 10000");
        fees = _fees; // stored in terms of basis-points
    }

    /// @notice Recover the address of the signer of a message.
    /// @param _ethSignedMessageHash The hash of the signed message
    /// @return address
    function recoverSigner(
        bytes32 _ethSignedMessageHash,
        bytes memory _signature
    ) public pure returns (address) {
        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);

        return ecrecover(_ethSignedMessageHash, v, r, s);
    }

    function splitSignature(
        bytes memory sig
    ) public pure returns (bytes32 r, bytes32 s, uint8 v) {
        require(sig.length == 65, "invalid signature length");

        assembly {
            /*
            First 32 bytes stores the length of the signature

            add(sig, 32) = pointer of sig + 32
            effectively, skips first 32 bytes of signature

            mload(p) loads next 32 bytes starting at the memory address p into memory
            */

            // first 32 bytes, after the length prefix
            r := mload(add(sig, 32))
            // second 32 bytes
            s := mload(add(sig, 64))
            // final byte (first byte of the next 32 bytes)
            v := byte(0, mload(add(sig, 96)))
        }

        // implicitly return (r, s, v)
    }

    // Builds a prefixed hash to mimic the behavior of eth_sign.
    function prefixed(bytes32 hash) internal pure returns (bytes32) {
        return
            keccak256(
                abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)
            );
    }
}
